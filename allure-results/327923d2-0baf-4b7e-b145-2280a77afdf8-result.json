{"name": "test_login_logout", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: chrome=141.0.7390.108); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff60d29e8e5+80021]\n\tGetHandleVerifier [0x0x7ff60d29e940+80112]\n\t(No symbol) [0x0x7ff60d02060f]\n\t(No symbol) [0x0x7ff60d036e35]\n\t(No symbol) [0x0x7ff60d035923]\n\t(No symbol) [0x0x7ff60d028ea7]\n\t(No symbol) [0x0x7ff60d029021]\n\t(No symbol) [0x0x7ff60d026d80]\n\t(No symbol) [0x0x7ff60d02b5b2]\n\t(No symbol) [0x0x7ff60d0caa1b]\n\t(No symbol) [0x0x7ff60d0a122a]\n\t(No symbol) [0x0x7ff60d0c968a]\n\t(No symbol) [0x0x7ff60d0a1003]\n\t(No symbol) [0x0x7ff60d0695d1]\n\t(No symbol) [0x0x7ff60d06a3f3]\n\tGetHandleVerifier [0x0x7ff60d55dc7d+2960429]\n\tGetHandleVerifier [0x0x7ff60d557f3a+2936554]\n\tGetHandleVerifier [0x0x7ff60d578977+3070247]\n\tGetHandleVerifier [0x0x7ff60d2b83ce+185214]\n\tGetHandleVerifier [0x0x7ff60d2bfe1f+216527]\n\tGetHandleVerifier [0x0x7ff60d2a7b24+117460]\n\tGetHandleVerifier [0x0x7ff60d2a7cdf+117903]\n\tGetHandleVerifier [0x0x7ff60d28dbb8+11112]\n\tBaseThreadInitThunk [0x0x7ffb2308e8d7+23]\n\tRtlUserThreadStart [0x0x7ffb23b6c53c+44]", "trace": "self = <tests.test_login.TestLogin object at 0x000001F591027110>\n\n    def test_login_logout(self):\n        home = HomePage(self.driver)\n        login = LoginPage(self.driver)\n    \n        home.open_url(\"https://www.demoblaze.com/\")\n        home.click_login()\n        login.login(\"hareesh\", \"hareesh\")  # Replace with valid credentials\n>       home.logout()\n\ntests\\test_login.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\home_page.py:15: in logout\n    self.click(self.LOGOUT_LINK)\npages\\base_page.py:15: in click\n    self.wait.until(EC.element_to_be_clickable(locator)).click()\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:364: in _predicate\n    element = visibility_of(target)(driver)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:173: in _predicate\n    return _element_if_visible(element)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:179: in _element_if_visible\n    return element if element.is_displayed() == visibility else False\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:252: in is_displayed\n    return self.parent.execute_script(f\"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);\", self)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:414: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F59981CF50>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...ff60d28dbb8+11112]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffb2308e8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ffb23b6c53c+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: chrome=141.0.7390.108); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff60d29e8e5+80021]\nE       \tGetHandleVerifier [0x0x7ff60d29e940+80112]\nE       \t(No symbol) [0x0x7ff60d02060f]\nE       \t(No symbol) [0x0x7ff60d036e35]\nE       \t(No symbol) [0x0x7ff60d035923]\nE       \t(No symbol) [0x0x7ff60d028ea7]\nE       \t(No symbol) [0x0x7ff60d029021]\nE       \t(No symbol) [0x0x7ff60d026d80]\nE       \t(No symbol) [0x0x7ff60d02b5b2]\nE       \t(No symbol) [0x0x7ff60d0caa1b]\nE       \t(No symbol) [0x0x7ff60d0a122a]\nE       \t(No symbol) [0x0x7ff60d0c968a]\nE       \t(No symbol) [0x0x7ff60d0a1003]\nE       \t(No symbol) [0x0x7ff60d0695d1]\nE       \t(No symbol) [0x0x7ff60d06a3f3]\nE       \tGetHandleVerifier [0x0x7ff60d55dc7d+2960429]\nE       \tGetHandleVerifier [0x0x7ff60d557f3a+2936554]\nE       \tGetHandleVerifier [0x0x7ff60d578977+3070247]\nE       \tGetHandleVerifier [0x0x7ff60d2b83ce+185214]\nE       \tGetHandleVerifier [0x0x7ff60d2bfe1f+216527]\nE       \tGetHandleVerifier [0x0x7ff60d2a7b24+117460]\nE       \tGetHandleVerifier [0x0x7ff60d2a7cdf+117903]\nE       \tGetHandleVerifier [0x0x7ff60d28dbb8+11112]\nE       \tBaseThreadInitThunk [0x0x7ffb2308e8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffb23b6c53c+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: StaleElementReferenceException"}, "start": 1761208219451, "stop": 1761208224486, "uuid": "8863f67f-7f47-43ac-b851-0e2b835ccee0", "historyId": "be347b1e5010e3732391015d8c8356a7", "testCaseId": "be347b1e5010e3732391015d8c8356a7", "fullName": "tests.test_login.TestLogin#test_login_logout", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "ASCENDI-5GIFRAO"}, {"name": "thread", "value": "19168-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}]}