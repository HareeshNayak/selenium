{"name": "test_add_to_cart", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=141.0.7390.77); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff6ecf4e9e5+80021]\n\tGetHandleVerifier [0x0x7ff6ecf4ea40+80112]\n\t(No symbol) [0x0x7ff6eccd060f]\n\t(No symbol) [0x0x7ff6eccd816a]\n\t(No symbol) [0x0x7ff6eccdb26f]\n\t(No symbol) [0x0x7ff6eccdb32f]\n\t(No symbol) [0x0x7ff6ecd2de94]\n\t(No symbol) [0x0x7ff6ecd2b2e1]\n\t(No symbol) [0x0x7ff6ecd2a1a0]\n\t(No symbol) [0x0x7ff6ecd1b7c8]\n\t(No symbol) [0x0x7ff6ecd5122a]\n\t(No symbol) [0x0x7ff6ecd1b056]\n\t(No symbol) [0x0x7ff6ecd51440]\n\t(No symbol) [0x0x7ff6ecd7968a]\n\t(No symbol) [0x0x7ff6ecd51003]\n\t(No symbol) [0x0x7ff6ecd195d1]\n\t(No symbol) [0x0x7ff6ecd1a3f3]\n\tGetHandleVerifier [0x0x7ff6ed20dd8d+2960445]\n\tGetHandleVerifier [0x0x7ff6ed20804a+2936570]\n\tGetHandleVerifier [0x0x7ff6ed228a87+3070263]\n\tGetHandleVerifier [0x0x7ff6ecf684ce+185214]\n\tGetHandleVerifier [0x0x7ff6ecf6ff1f+216527]\n\tGetHandleVerifier [0x0x7ff6ecf57c24+117460]\n\tGetHandleVerifier [0x0x7ff6ecf57ddf+117903]\n\tGetHandleVerifier [0x0x7ff6ecf3dcb8+11112]\n\tBaseThreadInitThunk [0x0x7ffe2921e8d7+23]\n\tRtlUserThreadStart [0x0x7ffe2a88c53c+44]", "trace": "self = <tests.test_add_to_cart.TestAddToCart object at 0x000001FC400A6D50>\n\n    def test_add_to_cart(self):\n        home = HomePage(self.driver)\n        product = ProductPage(self.driver)\n        cart = CartPage(self.driver)\n    \n        home.open_url(\"https://www.demoblaze.com/\")\n        home.open_category(\"Phones\")\n>       product.select_product()\n\ntests\\test_add_to_cart.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\product_page.py:11: in select_product\n    self.click(self.PRODUCT_LINK)\npages\\base_page.py:15: in click\n    self.wait.until(EC.element_to_be_clickable(locator)).click()\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001FC40102A50>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...ff6ecf3dcb8+11112]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffe2921e8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ffe2a88c53c+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=141.0.7390.77); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff6ecf4e9e5+80021]\nE       \tGetHandleVerifier [0x0x7ff6ecf4ea40+80112]\nE       \t(No symbol) [0x0x7ff6eccd060f]\nE       \t(No symbol) [0x0x7ff6eccd816a]\nE       \t(No symbol) [0x0x7ff6eccdb26f]\nE       \t(No symbol) [0x0x7ff6eccdb32f]\nE       \t(No symbol) [0x0x7ff6ecd2de94]\nE       \t(No symbol) [0x0x7ff6ecd2b2e1]\nE       \t(No symbol) [0x0x7ff6ecd2a1a0]\nE       \t(No symbol) [0x0x7ff6ecd1b7c8]\nE       \t(No symbol) [0x0x7ff6ecd5122a]\nE       \t(No symbol) [0x0x7ff6ecd1b056]\nE       \t(No symbol) [0x0x7ff6ecd51440]\nE       \t(No symbol) [0x0x7ff6ecd7968a]\nE       \t(No symbol) [0x0x7ff6ecd51003]\nE       \t(No symbol) [0x0x7ff6ecd195d1]\nE       \t(No symbol) [0x0x7ff6ecd1a3f3]\nE       \tGetHandleVerifier [0x0x7ff6ed20dd8d+2960445]\nE       \tGetHandleVerifier [0x0x7ff6ed20804a+2936570]\nE       \tGetHandleVerifier [0x0x7ff6ed228a87+3070263]\nE       \tGetHandleVerifier [0x0x7ff6ecf684ce+185214]\nE       \tGetHandleVerifier [0x0x7ff6ecf6ff1f+216527]\nE       \tGetHandleVerifier [0x0x7ff6ecf57c24+117460]\nE       \tGetHandleVerifier [0x0x7ff6ecf57ddf+117903]\nE       \tGetHandleVerifier [0x0x7ff6ecf3dcb8+11112]\nE       \tBaseThreadInitThunk [0x0x7ffe2921e8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffe2a88c53c+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: StaleElementReferenceException"}, "start": 1760982280532, "stop": 1760982285283, "uuid": "a41d8ab2-7159-4b87-85d8-754f9bb6fb57", "historyId": "de95c737f040f08296a58dd6cce2fede", "testCaseId": "de95c737f040f08296a58dd6cce2fede", "fullName": "tests.test_add_to_cart.TestAddToCart#test_add_to_cart", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_add_to_cart"}, {"name": "subSuite", "value": "TestAddToCart"}, {"name": "host", "value": "ASCENDI-5GIFRAO"}, {"name": "thread", "value": "16512-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_add_to_cart"}]}